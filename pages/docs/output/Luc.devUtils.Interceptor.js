Ext.data.JsonP.Luc_devUtils_Interceptor({"tagname":"class","name":"Luc.devUtils.Interceptor","autodetected":{},"files":[{"filename":"interceptor.js","href":"interceptor.html#Luc-devUtils-Interceptor"}],"members":[{"name":"functions","tagname":"cfg","owner":"Luc.devUtils.Interceptor","id":"cfg-functions","meta":{}},{"name":"logs","tagname":"cfg","owner":"Luc.devUtils.Interceptor","id":"cfg-logs","meta":{}},{"name":"profile","tagname":"cfg","owner":"Luc.devUtils.Interceptor","id":"cfg-profile","meta":{}},{"name":"times","tagname":"cfg","owner":"Luc.devUtils.Interceptor","id":"cfg-times","meta":{}},{"name":"getReport","tagname":"method","owner":"Luc.devUtils.Interceptor","id":"method-getReport","meta":{}},{"name":"restore","tagname":"method","owner":"Luc.devUtils.Interceptor","id":"method-restore","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Luc.devUtils.Interceptor","short_doc":"Intercepts methods on objects to add time info or console logs or functions. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/interceptor.html#Luc-devUtils-Interceptor' target='_blank'>interceptor.js</a></div></pre><div class='doc-contents'><p>Intercepts methods on objects to add time info or console logs or functions.</p>\n\n<pre><code>var interceptor = new <a href=\"#!/api/Luc.devUtils.Interceptor\" rel=\"Luc.devUtils.Interceptor\" class=\"docClass\">Luc.devUtils.Interceptor</a>({\n    logs: {\n        obj: Luc.devUtils.Runner.prototype,\n        fnName: 'run',\n        before: 'running ...',\n        after: function(f) {\n            return 'first call arg ' + f;\n        }\n    },\n    times: [{\n        obj: Luc.devUtils.Runner.prototype,\n        fnName: 'run'\n    }],\n    functions: {\n        obj: Luc.devUtils.Runner.prototype,\n        fnName: 'run',\n        before: function() {\n            window.alert('running ....')\n        }\n    }\n}),\nv = new <a href=\"#!/api/Luc.devUtils.Runner\" rel=\"Luc.devUtils.Runner\" class=\"docClass\">Luc.devUtils.Runner</a>({\n    // .....\n});\n</code></pre>\n\n<p>v.run('a') would output something like</p>\n\n<pre><code>running ...\nfirst call arg a\n//This is from the times\nrun: 14.539ms\n</code></pre>\n\n<p>interceptor.getReport() would output something like:</p>\n\n<pre><code>{ run:\n    {\"iterationsRun\":1,\"totalTime\":14.53899999614805,\"average\":14.53899999614805}\n}\n</code></pre>\n\n<p>after calling interceptor.restore()\nthe methods will be restored back to their original states.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-functions' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-cfg-functions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-cfg-functions' class='name expandable'>functions</a> : Object/Object[]<span class=\"signature\"></span></div><div class='description'><div class='short'>An object or array of objects with the following properties ...</div><div class='long'><p>An object or array of objects with the following properties</p>\n<ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>(required) the object with the function to override.</p>\n</div></li><li><span class='pre'>fnName</span> : String<div class='sub-desc'><p>(required) the name of the function.</p>\n</div></li><li><span class='pre'>before</span> : Function (optional)<div class='sub-desc'><p>function to call before the original function has been called.</p>\n</div></li><li><span class='pre'>after</span> : Function (optional)<div class='sub-desc'><p>function to call after the original function has been called.</p>\n</div></li><li><span class='pre'>logResult</span> : Boolean (optional)<div class='sub-desc'><p>true to log the return value of the function.</p>\n</div></li></ul></div></div></div><div id='cfg-logs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-cfg-logs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-cfg-logs' class='name expandable'>logs</a> : Object/Object[]<span class=\"signature\"></span></div><div class='description'><div class='short'>An object or array of objects with the following properties ...</div><div class='long'><p>An object or array of objects with the following properties</p>\n<ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>(required) the object that has the function to show logs.</p>\n</div></li><li><span class='pre'>fnName</span> : String<div class='sub-desc'><p>(required) the name of the function to show logs.</p>\n</div></li><li><span class='pre'>before</span> : String|Function (optional)<div class='sub-desc'><p>the console output to log before the function is called.</p>\n</div></li><li><span class='pre'>after</span> : String|Function (optional)<div class='sub-desc'><p>the console output to log after the function is called.</p>\n</div></li><li><span class='pre'>logResult</span> : Boolean (optional)<div class='sub-desc'><p>true to log the return value of the function.</p>\n\n<p>For example this would log <br></p>\n\n<pre><code>    \"running ..\" before run is called &lt;br&gt;\n</code></pre>\n\n<p>and <br></p>\n\n<pre><code>    \"first call arg : undefined\" &lt;br&gt;\n</code></pre>\n\n<p>after run is called</p>\n\n<pre><code> logs : {\n    fnName: 'run',\n    obj: Luc.devUtils.Runner.prototype,\n    before: 'running ...',\n    after: function() {\n        return 'first call arg' + arguments[0];\n    }\n }\n</code></pre>\n</div></li></ul></div></div></div><div id='cfg-profile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-cfg-profile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-cfg-profile' class='name expandable'>profile</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'><p>true to invoke profiling if supported by the browser/node when using\ntime configs</p>\n</div><div class='long'><p>true to invoke profiling if supported by the browser/node when using\ntime configs</p>\n</div></div></div><div id='cfg-times' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-cfg-times' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-cfg-times' class='name expandable'>times</a> : Object/Object[]<span class=\"signature\"></span></div><div class='description'><div class='short'>An object or array of objects with the following properties ...</div><div class='long'><p>An object or array of objects with the following properties</p>\n<ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>(required) the object that has the function to track time.</p>\n</div></li><li><span class='pre'>fnName</span> : String<div class='sub-desc'><p>(required) the name of the function to track time.</p>\n</div></li><li><span class='pre'>logResult</span> : Boolean (optional)<div class='sub-desc'><p>true to log the return value of the function.</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getReport' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-method-getReport' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-method-getReport' class='name expandable'>getReport</a>( <span class='pre'></span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the time info for functions the\nrun, they are keyed off by function name. ...</div><div class='long'><p>Returns the time info for functions the\nrun, they are keyed off by function name.  The time\ninfo will may vary slightly from the console.time output.\nThis will only show info if <a href=\"#!/api/Luc.devUtils.Interceptor-cfg-times\" rel=\"Luc.devUtils.Interceptor-cfg-times\" class=\"docClass\">times </a> are defined.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-restore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.devUtils.Interceptor'>Luc.devUtils.Interceptor</span><br/><a href='source/interceptor.html#Luc-devUtils-Interceptor-method-restore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.devUtils.Interceptor-method-restore' class='name expandable'>restore</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Restore the intercepted function(s) back to their original\nstates. ...</div><div class='long'><p>Restore the intercepted function(s) back to their original\nstates.</p>\n</div></div></div></div></div></div></div>","meta":{}});